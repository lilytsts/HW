{
	"info": {
		"_postman_id": "36169e18-1569-4320-93d9-7afaaa737fe2",
		"name": "HW_3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22516414"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json(); //парсим ответ сервера ",
							"let resp_token = jsonData.token //из этого json вытащили значение(\"/s34lfgbj/Lily/jjd909/47601kjkWpqc2790232gfydgqw444173evny\") по ключу(токен)",
							"console.log(resp_token)",
							"",
							"pm.environment.set(\"token\", resp_token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Lily",
							"type": "text"
						},
						{
							"key": "password",
							"value": "232gfydgqw",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"//Получить статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Проверка структуры json в ответе",
							"let schema = {",
							"    \"$schema\": \"https://json-schema.org/draft/2019-09/schema\",",
							"    \"$id\": \"http://example.com/example.json\",",
							"    \"type\": \"object\",",
							"    \"default\": {},",
							"    \"title\": \"Root Schema\",",
							"    \"required\": [",
							"        \"person\",",
							"        \"qa_salary_after_12_months\",",
							"        \"qa_salary_after_6_months\",",
							"        \"start_qa_salary\"",
							"    ],",
							"    \"properties\": {",
							"        \"person\": {",
							"            \"type\": \"object\",",
							"            \"default\": {},",
							"            \"title\": \"The person Schema\",",
							"            \"required\": [",
							"                \"u_age\",",
							"                \"u_name\",",
							"                \"u_salary_1_5_year\"",
							"            ],",
							"            \"properties\": {",
							"                \"u_age\": {",
							"                    \"type\": \"integer\",",
							"                    \"default\": 0,",
							"                    \"title\": \"The u_age Schema\",",
							"                    \"examples\": [",
							"                        33",
							"                    ]",
							"                },",
							"                \"u_name\": {",
							"                    \"type\": \"array\",",
							"                    \"default\": [],",
							"                    \"title\": \"The u_name Schema\",",
							"                    \"items\": {",
							"                        \"anyOf\": [{",
							"                            \"type\": \"string\",",
							"                            \"default\": \"\",",
							"                            \"title\": \"A Schema\",",
							"                            \"examples\": [",
							"                                \"Lily\"",
							"                            ]",
							"                        },",
							"                        {",
							"                            \"type\": \"integer\",",
							"                            \"title\": \"A Schema\",",
							"                            \"examples\": [",
							"                                1000,",
							"                                33",
							"                            ]",
							"                        }]",
							"                    },",
							"                    \"examples\": [",
							"                        [\"Aleksei\",",
							"                            1000,",
							"                            33",
							"                        ]",
							"                    ]",
							"                },",
							"                \"u_salary_1_5_year\": {",
							"                    \"type\": \"integer\",",
							"                    \"default\": 0,",
							"                    \"title\": \"The u_salary_1_5_year Schema\",",
							"                    \"examples\": [",
							"                        4000",
							"                    ]",
							"                }",
							"            },",
							"            \"examples\": [{",
							"                \"u_age\": 33,",
							"                \"u_name\": [",
							"                    \"Lily\",",
							"                    1000,",
							"                    33",
							"                ],",
							"                \"u_salary_1_5_year\": 4000",
							"            }]",
							"        },",
							"        \"qa_salary_after_12_months\": {",
							"            \"type\": \"number\",",
							"            \"default\": 0.0,",
							"            \"title\": \"The qa_salary_after_12_months Schema\",",
							"            \"examples\": [",
							"                2900.0",
							"            ]",
							"        },",
							"        \"qa_salary_after_6_months\": {",
							"            \"type\": \"integer\",",
							"            \"default\": 0,",
							"            \"title\": \"The qa_salary_after_6_months Schema\",",
							"            \"examples\": [",
							"                2000",
							"            ]",
							"        },",
							"        \"start_qa_salary\": {",
							"            \"type\": \"integer\",",
							"            \"default\": 0,",
							"            \"title\": \"The start_qa_salary Schema\",",
							"            \"examples\": [",
							"                1000",
							"            ]",
							"        }",
							"    },",
							"    \"examples\": [{",
							"        \"person\": {",
							"            \"u_age\": 29,",
							"            \"u_name\": [",
							"                \"Lily\",",
							"                1000,",
							"                29",
							"            ],",
							"            \"u_salary_1_5_year\": 4000",
							"        },",
							"        \"qa_salary_after_12_months\": 2900.0,",
							"        \"qa_salary_after_6_months\": 2000,",
							"        \"start_qa_salary\": 1000",
							"    }]",
							"};",
							"   ",
							"let result = tv4.validateResult(pm.response.json(), schema);",
							"pm.test('Schema is valid', function () {",
							"    pm.expect(result.valid).to.be.true;",
							"});",
							"",
							"let respData = pm.response.json();",
							"let reqData = JSON.parse(request.data);",
							"",
							"pm.test(\"start_qa_salary = 1000\", function () {",
							"    pm.expect(respData.start_qa_salary).to.eql+(reqData.salary);",
							"});",
							"",
							"pm.test(\"qa_salary_after_6_months *2 = 2000\", function () {",
							"    pm.expect(respData.qa_salary_after_6_months).to.eql+(reqData.salary*2);",
							"});",
							"",
							"pm.test(\"qa_salary_after_12_months *2.9 = 2900\", function () {",
							"    pm.expect(respData.qa_salary_after_12_months).to.eql+(reqData.salary*2.9);",
							"});",
							"",
							"pm.test(\"u_salary_1_5_year *4 = 4000\", function () {",
							"    pm.expect(respData.person.u_salary_1_5_year).to.eql+(reqData.salary*4);",
							"});",
							"",
							"",
							"pm.environment.set(\"new_salary\", respData.person.u_salary_1_5_year);",
							"console.log(\"u_salary_1_5_year\", respData.person.u_salary_1_5_year);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"age\": 33,\n    \"salary\": 1000,\n    \"name\": \"Lily\",\n    \"auth_token\": \"{{token}}\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/user_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"let schema = {",
							"    \"$schema\": \"https://json-schema.org/draft/2019-09/schema\",",
							"    \"$id\": \"http://example.com/example.json\",",
							"    \"type\": \"object\",",
							"    \"default\": {},",
							"    \"title\": \"Root Schema\",",
							"    \"required\": [",
							"        \"age\",",
							"        \"name\",",
							"        \"salary\"",
							"    ],",
							"    \"properties\": {",
							"        \"age\": {",
							"            \"type\": \"integer\",",
							"            \"default\": 0,",
							"            \"title\": \"The age Schema\",",
							"            \"examples\": [",
							"                33",
							"            ]",
							"        },",
							"        \"name\": {",
							"            \"type\": \"string\",",
							"            \"default\": \"\",",
							"            \"title\": \"The name Schema\",",
							"            \"examples\": [",
							"                \"Lily\"",
							"            ]",
							"        },",
							"        \"salary\": {",
							"            \"type\": \"array\",",
							"            \"default\": [],",
							"            \"title\": \"The salary Schema\",",
							"            \"items\": {",
							"                \"anyOf\": [{",
							"                    \"type\": \"integer\",",
							"                    \"default\": 0,",
							"                    \"title\": \"A Schema\",",
							"                    \"examples\": [",
							"                        1000",
							"                    ]",
							"                },",
							"                {",
							"                    \"type\": \"string\",",
							"                    \"title\": \"A Schema\",",
							"                    \"examples\": [",
							"                        \"2000\",",
							"                        \"3000\"",
							"                    ]",
							"                }]",
							"            },",
							"            \"examples\": [",
							"                [1000,",
							"                    \"2000\",",
							"                    \"3000\"",
							"                ]",
							"            ]",
							"        }",
							"    },",
							"    \"examples\": [{",
							"        \"age\": 33,",
							"        \"name\": \"Lily\",",
							"        \"salary\": [",
							"            1000,",
							"            \"2000\",",
							"            \"3000\"",
							"        ]",
							"    }]",
							"};",
							"",
							"let result = tv4.validateResult(pm.response.json(), schema);",
							"",
							"pm.test('Schema is valid', function () {",
							"    pm.expect(result.valid).to.be.true;",
							"    });",
							"",
							"",
							"",
							"let respData = pm.response.json();",
							"let reqData = request.data;",
							"",
							"pm.test(\"resp salary[0] = req salary*1\", function () {",
							"    pm.expect(respData.salary[0]).to.eql+(reqData.salary);",
							"});",
							"",
							"pm.test(\"resp salary[1] = req salary*2\", function () {",
							"    pm.expect(respData.salary[1]).to.eql+(reqData.salary[1]);",
							"});",
							"",
							"pm.test(\"resp salary[2] = req salary*3\", function () {",
							"    pm.expect(respData.salary[2]).to.eql+(reqData.salary*2);",
							"});",
							"",
							"",
							"pm.test(\"resp salary[2] > resp salary[1] and > resp salary[0]\", function () {",
							"    pm.expect(+respData.salary[2]).to.above(+respData.salary[1]);",
							"    pm.expect(+respData.salary[1]).to.above(respData.salary[0]);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "33",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "lily",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/new_data",
					"host": [
						"{{url}}"
					],
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"let schema = {",
							"    \"$schema\": \"https://json-schema.org/draft/2019-09/schema\",",
							"    \"$id\": \"http://example.com/example.json\",",
							"    \"type\": \"object\",",
							"    \"default\": {},",
							"    \"title\": \"Root Schema\",",
							"    \"required\": [",
							"        \"age\",",
							"        \"daily_food\",",
							"        \"daily_sleep\",",
							"        \"name\"",
							"    ],",
							"    \"properties\": {",
							"        \"age\": {",
							"            \"type\": \"integer\",",
							"            \"default\": 0,",
							"            \"title\": \"The age Schema\",",
							"            \"examples\": [",
							"                33",
							"            ]",
							"        },",
							"        \"daily_food\": {",
							"            \"type\": \"number\",",
							"            \"default\": 0.0,",
							"            \"title\": \"The daily_food Schema\",",
							"            \"examples\": [",
							"                0.84",
							"            ]",
							"        },",
							"        \"daily_sleep\": {",
							"            \"type\": \"number\",",
							"            \"default\": 0.0,",
							"            \"title\": \"The daily_sleep Schema\",",
							"            \"examples\": [",
							"                175.0",
							"            ]",
							"        },",
							"        \"name\": {",
							"            \"type\": \"string\",",
							"            \"default\": \"\",",
							"            \"title\": \"The name Schema\",",
							"            \"examples\": [",
							"                \"Lily\"",
							"            ]",
							"        }",
							"    },",
							"    \"examples\": [{",
							"        \"age\": 33,",
							"        \"daily_food\": 0.84,",
							"        \"daily_sleep\": 175.0,",
							"        \"name\": \"Lily\"",
							"    }]",
							"};",
							"",
							"let result = tv4.validateResult(pm.response.json(), schema);",
							"",
							"pm.test('Schema is valid', function () {",
							"    pm.expect(result.valid).to.be.true;",
							"});",
							"",
							"let respWeight = pm.response.json();",
							"let reqWeight = request.data;",
							"",
							"pm.test(\"resp daily_food = req weight*0.012\", function () {",
							"       pm.expect(respWeight.daily_food).to.eql(reqWeight.weight*0.012);",
							"});",
							"",
							"pm.test(\"resp daily_sleep = req weight*2.5\", function () {",
							"       pm.expect(respWeight.daily_sleep).to.eql(reqWeight.weight*2.5);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "33",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "58",
							"type": "text"
						},
						{
							"key": "name",
							"value": "lily",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/test_pet_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"pm.response.to.have.status(200);",
							"});",
							"",
							"let schema = {",
							"    \"$schema\": \"https://json-schema.org/draft/2019-09/schema\",",
							"    \"$id\": \"http://example.com/example.json\",",
							"    \"type\": \"object\",",
							"    \"default\": {},",
							"    \"title\": \"Root Schema\",",
							"    \"required\": [",
							"        \"age\",",
							"        \"family\",",
							"        \"name\",",
							"        \"salary\"",
							"    ],",
							"    \"properties\": {",
							"        \"age\": {",
							"            \"type\": \"string\",",
							"            \"default\": \"\",",
							"            \"title\": \"The age Schema\",",
							"            \"examples\": [",
							"                \"29\"",
							"            ]",
							"        },",
							"        \"family\": {",
							"            \"type\": \"object\",",
							"            \"default\": {},",
							"            \"title\": \"The family Schema\",",
							"            \"required\": [",
							"                \"children\",",
							"                \"u_salary_1_5_year\"",
							"            ],",
							"            \"properties\": {",
							"                \"children\": {",
							"                    \"type\": \"array\",",
							"                    \"default\": [],",
							"                    \"title\": \"The children Schema\",",
							"                    \"items\": {",
							"                        \"type\": \"array\",",
							"                        \"title\": \"A Schema\",",
							"                        \"items\": {",
							"                            \"anyOf\": [{",
							"                                \"type\": \"string\",",
							"                                \"title\": \"A Schema\",",
							"                                \"examples\": [",
							"                                    \"Alex\",",
							"                                    \"Kate\"",
							"                                ]",
							"                            },",
							"                            {",
							"                                \"type\": \"integer\",",
							"                                \"title\": \"A Schema\",",
							"                                \"examples\": [",
							"                                    24,",
							"                                    12",
							"                                ]",
							"                            }]",
							"                        },",
							"                        \"examples\": [",
							"                            [\"Alex\",",
							"                                24",
							"                            ],",
							"                            [\"Kate\",",
							"                                12",
							"                            ]",
							"                        ]",
							"                    },",
							"                    \"examples\": [",
							"                        [",
							"                            [\"Alex\",",
							"                                24",
							"                            ],",
							"                            [\"Kate\",",
							"                                12",
							"                            ]",
							"                        ]",
							"                    ]",
							"                },",
							"                \"u_salary_1_5_year\": {",
							"                    \"type\": \"integer\",",
							"                    \"default\": 0,",
							"                    \"title\": \"The u_salary_1_5_year Schema\",",
							"                    \"examples\": [",
							"                        4000",
							"                    ]",
							"                }",
							"            },",
							"            \"examples\": [{",
							"                \"children\": [",
							"                    [\"Alex\",",
							"                        24",
							"                    ],",
							"                    [\"Kate\",",
							"                        12",
							"                    ]",
							"                ],",
							"                \"u_salary_1_5_year\": 4000",
							"            }]",
							"        },",
							"        \"name\": {",
							"            \"type\": \"string\",",
							"            \"default\": \"\",",
							"            \"title\": \"The name Schema\",",
							"            \"examples\": [",
							"                \"Lily\"",
							"            ]",
							"        },",
							"        \"salary\": {",
							"            \"type\": \"integer\",",
							"            \"default\": 0,",
							"            \"title\": \"The salary Schema\",",
							"            \"examples\": [",
							"                1000",
							"            ]",
							"        }",
							"    },",
							"    \"examples\": [{",
							"        \"age\": \"33\",",
							"        \"family\": {",
							"            \"children\": [",
							"                [\"Alex\",",
							"                    24",
							"                ],",
							"                [\"Kate\",",
							"                    12",
							"                ]",
							"            ],",
							"            \"u_salary_1_5_year\": 4000",
							"        },",
							"        \"name\": \"Lily\",",
							"        \"salary\": 1000",
							"    }]",
							"};",
							"",
							"let result = tv4.validateResult(pm.response.json(), schema);",
							"",
							"pm.test('Schema is valid', function () {",
							"    pm.expect(result.valid).to.be.true;",
							"    });",
							"",
							"let resp = pm.response.json();",
							"",
							"pm.test(\"value field name = value name variable from the environment\", function () {",
							"    pm.expect(resp.name).to.eql(pm.environment.get(\"name\"));",
							"});",
							"",
							"",
							"let req = request.data;",
							"",
							"pm.test(\"rsp value field age corresponds req value field age\", function () {",
							"    pm.expect(resp.age).to.eql(req.age);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "33",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "lily",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/get_test_user",
					"host": [
						"{{url}}"
					],
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Тесты:",
							"// 1) Можете взять любой объект из присланного списка, используйте js random.",
							"let resp = pm.response.json();",
							"let randomObj =resp[Math.floor(Math.random() * resp.length)];",
							"pm.environment.set (\"Cur_ID\", randomObj.Cur_ID)",
							"",
							"// В объекте возьмите Cur_ID и передать через окружение в следующий запрос.",
							"let curId = pm.environment.get(\"Cur_ID\")",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://54.157.99.22:80/currency",
					"protocol": "http",
					"host": [
						"54",
						"157",
						"99",
						"22"
					],
					"port": "80",
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "сurr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Тесты:",
							"// 1) Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 2) Проверка структуры json в ответе.",
							"const schema = {",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"Cur_Abbreviation\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"Cur_ID\": {",
							"      \"type\": \"integer\"",
							"    },",
							"    \"Cur_Name\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"Cur_OfficialRate\": {",
							"      \"type\": \"number\"",
							"    },",
							"    \"Cur_Scale\": {",
							"      \"type\": \"integer\"",
							"    },",
							"    \"Date\": {",
							"      \"type\": \"string\"",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"Cur_Abbreviation\",",
							"    \"Cur_ID\",",
							"    \"Cur_Name\",",
							"    \"Cur_OfficialRate\",",
							"    \"Cur_Scale\",",
							"    \"Date\"",
							"  ]",
							"}",
							"",
							"pm.test(\"json is valid\", function(){",
							"    pm.response.to.have.jsonSchema(schema);",
							"})",
							"",
							"let resp = pm.response.json();",
							"let arrLength = resp.length;",
							"",
							"let token = pm.environment.get(\"token\");",
							"",
							"for(let i = 0; i < arrLength; i++){",
							"    let curId = resp[i].Cur_ID;",
							"    const regRequest = {",
							"        'method': 'POST',",
							"        'url': 'http://162.55.220.72:5005/curr_byn',",
							"        'body': {",
							"            'mode': 'formdata',",
							"            'formdata': [",
							"                {'key': 'auth_token', 'value': token},",
							"                {'key': 'curr_code', 'value': curId}",
							"            ]",
							"        }",
							"    };",
							"    pm.sendRequest(regRequest, (err, res) => {",
							"        if(pm.expect(res).to.have.status(200, \"Unexpected response status code\")){",
							"            let resp = res.json();",
							"            if(\"Cur_OfficialRate\" in resp){",
							"                console.log(resp);",
							"            };",
							"        }",
							"    });",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{Cur_ID}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://54.157.99.22:80/curr_byn",
					"protocol": "http",
					"host": [
						"54",
						"157",
						"99",
						"22"
					],
					"port": "80",
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		}
	]
}