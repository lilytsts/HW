{
	"info": {
		"_postman_id": "5b718062-e2d6-4f7e-af91-7f95d9056831",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22516414"
	},
	"item": [
		{
			"name": "/first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"//Проверить, что в body приходит правильный string.",
							"pm.test(\"Checking that the correct string comes into the body\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!ss\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Получить статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//Спарсить response body в json",
							"let parsingResponse = pm.response.json()",
							"console.log(\"parsing_response\", parsingResponse);",
							"",
							"//Проверить, что name в ответе равно name в request",
							"pm.test(\"Check_name\", function(){",
							"    pm.expect(parsingResponse.name).to.equal(\"lily\");",
							"});",
							"",
							"//Проверить, что age в ответе равно age в request ",
							"pm.test(\"Check_age\", function(){",
							"   pm.expect(parsingResponse.age).to.equal(\"33\");",
							"});",
							"",
							"//Проверить, что salary в ответе равно salary в request ",
							"pm.test(\"Check_salary\", function(){",
							"    pm.expect(parsingResponse.salary).to.equal(1000);",
							"});",
							"",
							"//Спарсить request",
							"let parsingRequest = request.data",
							"console.log(\"parsing_request\", parsingRequest);",
							"",
							"//Проверить, что name в ответе равно name в request ",
							"pm.test(\"Check_name_from_request\", function(){",
							"    pm.expect(parsingResponse.name).to.equal(parsingRequest.name);",
							"});",
							"",
							"//Проверить, что age в ответе равно age в request ",
							"pm.test(\"Check_age_from_request\", function(){",
							"    pm.expect(parsingResponse.age).to.equal(parsingRequest.age);",
							"});",
							"",
							"//Проверить, что salary в ответе равно salary в request ",
							"pm.test(\"Check_salary_from_request\", function(){",
							"    pm.expect(parsingResponse.salary).to.equal(+parsingRequest.salary);",
							"});",
							"",
							"//Вывести в консоль параметр family из response.",
							"console.log(\"Family_from_response\", parsingResponse.family);",
							"",
							"//Проверить, что u_salary_1_5_year в ответе равно salary * 4 ",
							"pm.test(\"u_salary_1_5_year\", function(){",
							"    pm.expect(parsingResponse.family.u_salary_1_5_year).to.equal(+parsingRequest.salary*4);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "lily",
							"type": "text"
						},
						{
							"key": "age",
							"value": "33",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"pm.response.to.have.status(200);",
							"});",
							"",
							"//Спарсить response body в json",
							"let responseParsing = pm.response.json()",
							"console.log(\"response_parsing\", responseParsing);",
							"",
							"//Спарсить request",
							"let requestParsing = pm.request.url.query.all()",
							"console.log(\"request_parsing\", requestParsing);",
							"",
							"//Проверить, что name в ответе равно name в request",
							"pm.test(\"Check_name_from_request\", function () {",
							"    pm.expect(responseParsing.name).to.equal(requestParsing[0].value)",
							"});",
							"",
							"//Проверить, что age в ответе равно age в request",
							"pm.test(\"Check_age_from_request\", function () {",
							"    pm.expect(responseParsing.age).to.equal(requestParsing[1].value)",
							"});",
							"",
							"//Проверить, что salary в ответе равно salary в request",
							"pm.test(\"Check_salary_from_request\", function () {",
							"    pm.expect(responseParsing.salary).to.equal(+requestParsing[2].value)",
							"});",
							"",
							"//Вывести в консоль параметр family из response",
							"console.log(\"family\", responseParsing.family);",
							"",
							"//Проверить, что у параметра dog есть параметр name",
							"pm.test(\"Check_dog_name\", function () {",
							"    pm.expect(responseParsing.family.pets.dog).to.have.property(\"name\")",
							"});",
							"",
							"//Проверить, что у параметра dog есть параметр age",
							"pm.test(\"Check_dog_age\", function () {",
							"    pm.expect(responseParsing.family.pets.dog).to.have.property(\"age\")",
							"});",
							"",
							"//Проверить, что параметр name имеет значение Luky",
							"pm.test(\"Check_dog_name_Luky\", function () {",
							"    pm.expect(responseParsing.family.pets.dog.name).to.equal(\"Luky\")",
							"});",
							"",
							"//Проверить, что параметр age имеет значение 4",
							"pm.test(\"Check_dog_age_4\", function () {",
							"    pm.expect(responseParsing.family.pets.dog.age).to.equal(4)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}/object_info_3?name=Lily&age={{age}}&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Lily"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Cтатус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//Спарсить response body в json",
							"let responseParsing = pm.response.json()",
							"console.log(\"response_parsing\", responseParsing);",
							"",
							"//Спарсить request",
							"let requestParsing = pm.request.url.query.all()",
							"console.log(\"request_parsing\", requestParsing);",
							"",
							"//Проверить, что name в ответе равно name в request ",
							"pm.test(\"Check_name_from_request\", function(){",
							"    pm.expect(responseParsing.name).to.equal(requestParsing[0].value)",
							"});",
							"",
							"//Проверить, что age в ответе равно age из request",
							"pm.test(\"Check_age_from_request\", function(){",
							"    pm.expect(responseParsing.age).to.equal(+requestParsing[1].value)",
							"});",
							"//Вывести в консоль параметр salary из request",
							"console.log(\"salary from request\", requestParsing[2].value);",
							"",
							"//Вывести в консоль параметр salary из response",
							"console.log(\"salary from response\", responseParsing.salary);",
							"",
							"//Вывести в консоль 0-й элемент параметра salary из response.",
							"console.log(\"salary_0_from response\", responseParsing.salary[0]);",
							"",
							"//Вывести в консоль 1-й элемент параметра salary параметр salary из response",
							"console.log(\"salary_1_from response\", responseParsing.salary[1]);",
							"",
							"//Вывести в консоль 2-й элемент параметра salary параметр salary из response",
							"console.log(\"salary_2_from response\", responseParsing.salary[2]);",
							"",
							"//Проверить, что 0-й элемент параметра salary равен salary из request ",
							"pm.test(\"salary_0_from request\", function(){",
							"    pm.expect(responseParsing.salary[0]).to.equal(+requestParsing[2].value)",
							"});",
							"",
							"//Проверить, что 1-й элемент параметра salary равен salary*2 из request ",
							"pm.test(\"salary_1_from request\", function(){",
							"    pm.expect(+responseParsing.salary[1]).to.equal(requestParsing[2].value*2)",
							"});",
							"",
							"//Проверить, что 2-й элемент параметра salary равен salary*3 из request",
							"pm.test(\"salary_2 from request\", function(){",
							"    pm.expect(+responseParsing.salary[2]).to.equal(requestParsing[2].value*3)",
							"});",
							"",
							"//Создать в окружении переменную name",
							"pm.environment.set(\"name\");",
							"//Создать в окружении переменную age",
							"pm.environment.set(\"age\");",
							"//Создать в окружении переменную salary",
							"pm.environment.set(\"salary\");",
							"//Передать в окружение переменную name",
							"pm.environment.set(\"name\", \"lily\");",
							"//Передать в окружение переменную age",
							"pm.environment.set(\"age\", \"33\");",
							"//Передать в окружение переменную salary",
							"pm.environment.set(\"salary\", \"1000\");",
							"",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.",
							"pm.test(\"Test salary\", () => {",
							"  pm.expect(responseParsing.salary).to.be.an(\"array\"); // Проверяем, что ответ содержит массив с зарплатами",
							"  responseParsing.salary.forEach((salary) => { // Итерируемся по каждому элементу массива",
							"    console.log(salary); // Выводим элемент в консоль",
							"  });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}/object_info_4?name=Lily&age={{age}}&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Lily"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200",
							"pm.test(\"Status_code_is_200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//Спарсить response body в json",
							"let responseParsing = pm.response.json()",
							"console.log(\"response_parsing\", responseParsing);",
							"",
							"//Спарсить request",
							"let requestParsing = request.data",
							"console.log(\"request_parsing\", requestParsing);",
							"",
							"//Проверить, что json response имеет параметр start_qa_salary",
							"pm.test(\"start_qa_salary\", function(){",
							"    pm.expect(responseParsing).to.have.property(\"start_qa_salary\");",
							"});",
							"",
							"//Проверить, что json response имеет параметр qa_salary_after_6_months",
							"pm.test(\"qa_salary_after_6_months\", function(){",
							"    pm.expect(responseParsing).to.have.property(\"qa_salary_after_6_months\");",
							"});",
							"",
							"//Проверить, что json response имеет параметр qa_salary_after_12_months",
							"pm.test(\"qa_salary_after_12_months\", function(){",
							"    pm.expect(responseParsing).to.have.property(\"qa_salary_after_12_months\");",
							"});",
							"",
							"//Проверить, что json response имеет параметр qa_salary_after_1.5_year",
							"pm.test(\"qa_salary_after_1.5_year\", function(){",
							"    pm.expect(responseParsing).to.have.property(\"qa_salary_after_1.5_year\");",
							"});",
							"",
							"//Проверить, что json response имеет параметр qa_salary_after_3.5_years",
							"pm.test(\"qa_salary_after_3.5_years\", function(){",
							"    pm.expect(responseParsing).to.have.property(\"qa_salary_after_3.5_years\");",
							"}); ",
							"",
							"//Проверить, что json response имеет параметр person",
							"pm.test(\"person\", function(){",
							"    pm.expect(responseParsing).to.have.property(\"person\");",
							"});",
							"",
							"//Проверить, что параметр start_qa_salary равен salary из request ",
							"pm.test(\"start_qa_salary from request\", function(){",
							"    pm.expect(responseParsing.start_qa_salary).to.equal(+requestParsing.salary);",
							"});",
							"",
							"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request",
							"pm.test(\"qa_salary_after_6_months from request\", function(){",
							"    pm.expect(responseParsing.qa_salary_after_6_months).to.equal(+requestParsing.salary*2);",
							"});",
							"",
							"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request ",
							"pm.test(\"qa_salary_after_12_months from request\", function(){",
							"    pm.expect(responseParsing.qa_salary_after_12_months).to.equal(+requestParsing.salary*2.7);",
							"});",
							"",
							"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request",
							"pm.test(\"qa_salary_after_1.5_year from request\", function(){",
							"    pm.expect(responseParsing[\"qa_salary_after_1.5_year\"]).to.equal(+requestParsing.salary*3.3);",
							"});",
							"",
							"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request ",
							"pm.test(\"qa_salary_after_3.5_years from request\", function(){",
							"    pm.expect(responseParsing[\"qa_salary_after_3.5_years\"]).to.equal(+requestParsing.salary*3.8);",
							"});",
							"",
							"//Проверить, что в параметре person, 1-й элемент из u_name равен salary из request ",
							"pm.test(\"u_name\", function(){",
							"    pm.expect(responseParsing.person.u_name[1]).to.equal(+requestParsing.salary)",
							"});",
							"",
							"//Проверить, что что параметр u_age равен age из request ",
							"pm.test(\"u_age\", function(){",
							"    pm.expect(responseParsing.person.u_age).to.equal(+requestParsing.age)",
							"});",
							"",
							"//Проверить, что параметр u_salary_5_years равен salary*4.2 из request",
							"pm.test(\"u_salary_5_years\", function(){",
							"    pm.expect(responseParsing.person.u_salary_5_years).to.equal(+requestParsing.salary*4.2)",
							"});",
							"",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра person.",
							"for (let i = 0; i < responseParsing.person.u_name.length; i++) {",
							"  console.log(\"Вывод из списка, элемента с индексом \"+ i +\": \"+ responseParsing.person.u_name[i]);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "mame",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}